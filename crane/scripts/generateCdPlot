#!/usr/bin/env python
"""
Script for generating bottom friction Cd plots.

Tuomas Karna 2013-01-07
"""

import os
import numpy as np
import files.gr3Interface as gr3Interface
from files.buildPoints import BuildPoint
from files.paramParser import ParamParser
from data.selfeGridUtils import verticalCoordinates

from plotting.plotBase import *
from plotting.plot import VARS,UNITS
from plotting.slabPlot import slabSnapshotDC

def generateCdPlot( dataDir, runTag, imgDir, mainChannel, clim=[0.00,0.006] ) :
  
  # load param.in and check bottom friction type
  params = ParamParser(os.path.join(dataDir,'param.in'))
  useRoughness = params['bfric'] == 1
  Cdmax = params['Cdmax'] if useRoughness else None
  print 'use roughness:',useRoughness

  if useRoughness :
    # load hgrid.gr3 in meshContainer
    depthMC = gr3Interface.readGR3FileToMC(os.path.join(dataDir,'hgrid.gr3'))

    # load rough.gr3 in meshContainer
    roughnessMC = gr3Interface.readGR3FileToMC(os.path.join(dataDir,'rough.gr3'),'roughness')

    depth = depthMC.getField('depth').squeeze()
    rough = roughnessMC.getField('roughness').squeeze()
    # generate fake eta field with a realistic ramp
    eta = np.zeros_like(depth)

    # read channel bp file
    channelBP = BuildPoint()
    channelBP.readFileFromDisk(mainChannel)
    channelX = channelBP.getX()
    channelY = channelBP.getY()

    # compute along channel distance
    Xdelta = np.hstack( (0, np.diff(channelX)) )
    Ydelta = np.hstack( (0, np.diff(channelY)) )
    Xalong = np.sqrt( Xdelta**2 + Ydelta**2 )
    Xalong = np.cumsum( Xalong )

    # increase resolution
    from scipy.interpolate import interp1d, griddata
    Npoints = 1000
    Xalong2 = np.linspace( Xalong[0], Xalong[-1], Npoints )
    channelX = interp1d( Xalong, channelX, kind='cubic' )(Xalong2)
    channelY = interp1d( Xalong, channelY, kind='cubic' )(Xalong2)
    Xalong = Xalong2

    # compute along channel distance
    Xdelta = np.hstack( (0, np.diff(channelX)) )
    Ydelta = np.hstack( (0, np.diff(channelY)) )
    Xalong = np.sqrt( Xdelta**2 + Ydelta**2 )
    Xalong = np.cumsum( Xalong )

    # ignore mouth region
    cropIx = channelX > 350000
    channelX = channelX[cropIx]
    channelY = channelY[cropIx]
    Xalong = Xalong[cropIx]

    # ramp in elevation along channel
    etalim = [0.0,8.0] # meters
    Xlim = Xalong[[0,-1]]
    etaAlong = interp1d( Xlim, etalim )(Xalong)

    # assing eta values to nearest grid points
    estuaryIx = depthMC.x > channelX[0]
    channelXY = np.vstack((channelX,channelY)).T
    gridXY = np.vstack((depthMC.x[estuaryIx],depthMC.y[estuaryIx])).T
    eta[estuaryIx] = griddata( channelXY, etaAlong[:,None], gridXY, method='nearest' ).squeeze()

    # generate vertical coordinates for eta
    vcoords = verticalCoordinates.fromVGridFile(os.path.join(dataDir,'vgrid.in'))
    z, kbot, iwet = vcoords.computeVerticalCoordinates(eta,depth)

    # compute Cd
    #1/(2.5*ln(bottom_thickness/rough))^2

    Cd = np.ones_like(eta)*Cdmax #np.zeros_like(eta)
    negative = rough < 0
    Cd[negative] = -rough[negative]
    goodIx = np.logical_and(iwet,~negative)
    for i in np.nonzero(goodIx)[0] :
      Cd[i] = min( 1/(2.5*np.log( (z[kbot[i]+1,i]-z[kbot[i],i])/rough[i] ) )**2, Cdmax )

    # store in meshContainer
    CdMC = roughnessMC.duplicateWithFields( [Cd], ['Cd'] )

    etaMC = roughnessMC.copy()
    etaMC.data[:,0,0] = eta
    etaMC.fieldNames[0] = 'elev'

  else :
    CdMC = gr3Interface.readGR3File(os.path.join(dataDir,'drag.gr3'),'Cd')

  # plot
  #clim = [0.00,0.006]
  NContour = 20
  createDirectory(imgDir)
  filetype='png'
  dpi=200
  if useRoughness :
    titleStr = '{0:s} : Bottom friction drag coefficient (Cdmax={1:g})'.format(runTag,Cdmax)
  else :
    titleStr = '{0:s} : Bottom friction drag coefficient'.format(runTag)

  def plotCd( CdMC, bBox, clim, NContour, titleStr, imgFile, imgDir, filetype, dpi ) :
    if bBox :
      aspect = float(bBox[1]-bBox[0])/float(bBox[3]-bBox[2])
    else :
      aspect = (CdMC.x.max()-CdMC.x.min())/(CdMC.y.max()-CdMC.y.min())
    minsize = 5 # inches
    height = minsize if aspect > 1.0 else minsize/aspect
    width = minsize*aspect if aspect > 1.0 else minsize
    width += 1.3 # make room for colorbar & labels
    figsize = (width,height)
    fig = plt.figure(figsize=figsize)
    dia = slabSnapshotDC(clabel='Cd',unit='', logScale=False,
                          climIsLog=False, clim=clim)
    dia.setupAxes( fig )
    dia.addSample( CdMC, 0, bbox=bBox, plotType='contourf', N=NContour )
    dia.showColorBar(format='%.2g')

    dia.addTitle(titleStr)
    #fig.tight_layout()
    # save to disk
    #dateStr = dateStr.replace(' ','_').replace(':','-')
    #file = '_'.join([fPrefix,name,var,dateStr])
    saveFigure( imgDir,imgFile,filetype,verbose=True, dpi=dpi )
    plt.close()

  bBox = [-50000, 386000, -500000, 700000] # All
  imgFile = 'cd_all'
  plotCd( CdMC, bBox, clim, NContour, titleStr, imgFile, imgDir, filetype, dpi )

  #bBox = [329962, 381353, 271524, 306081] # estuary PT
  bBox = [329962, 386000, 271524, 306081] # estuary PT
  imgFile = 'cd_estuary'
  plotCd( CdMC, bBox, clim, NContour, titleStr, imgFile, imgDir, filetype, dpi )

  bBox = [377880, 514248, 195546, 299563] # river
  bBox = [357000, 514248, 195546, 299563] # river
  imgFile = 'cd_tidalfresh'
  plotCd( CdMC, bBox, clim, NContour, titleStr, imgFile, imgDir, filetype, dpi )

  #bBox = [325000, 410000, 268000, 306081] # estuary PT
  #imgFile = 'eta_estuary'
  #plotCd( etaMC, bBox, [0,8], 400, 'eta', imgFile, imgDir, filetype, dpi )

#-------------------------------------------------------------------------------
# Main: Commandline interface
#-------------------------------------------------------------------------------
def parseCommandLine() :
  from optparse import OptionParser

  parser = OptionParser()
  parser.add_option('-r', '--runID', action='store', type='string',
                      dest='runTag', help='Run ID, used as a label in post-proc.')
  parser.add_option('-d', '--dataDirectory', action='store', type='string',
                      dest='dataDir', help='directory where model hgrid.gr3 etc files are stored')
  parser.add_option('-o', '--imageDirectory', action='store', type='string',
                      dest='imgDir', help='directory where generated images are stored')
  parser.add_option('-m', '--mainChannel', action='store', type='string',
                      dest='mainChannel', help='file for main channel definition')
  parser.add_option('-c', '--clim', action='store', type='string',
                      dest='climStr', help='Custom limits for color bar, a string like [0.0,0.03]')

  (options, args) = parser.parse_args()
  runTag        = options.runTag
  dataDir       = options.dataDir
  imgDir = options.imgDir
  mainChannel = options.mainChannel
  climStr = options.climStr

  if runTag == None:
    parser.print_help()
    parser.error('runTag undefined')
  if not dataDir :
    parser.print_help()
    parser.error('dataDir  undefined')
  if imgDir == None:
    parser.print_help()
    parser.error('imgDir undefined')
  if mainChannel == '':
    mainChannel = '/usr/local/cmop/modeling/processing/share/main_channel.bp'

  clim = [0.00,0.006]
  if climStr :
    words = climStr.strip('[').strip(']').split(',')
    clim[0] = float(words[0])
    clim[1] = float(words[1])
    print words
    print clim

  print 'Parsed options:'
  print ' - run ID',runTag
  print ' - dataDir',dataDir
  print ' - output dir',imgDir
  print ' - main channel definition',mainChannel
  if clim :
    print ' - Cd color limits',clim

  generateCdPlot(dataDir,runTag,imgDir,mainChannel,clim)

if __name__=='__main__' :
  parseCommandLine()
